openapi: 3.0.3
info:
  title: Order Management API
  description: Mock API for SDET Assignment - Order Management System
  version: 1.0.0
  contact:
    name: SDET Assignment
    email: sdet@example.com

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the API server
      operationId: getHealth
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-01T12:00:00.000Z"

  /api/orders:
    get:
      summary: Get all orders
      description: Retrieve a list of all orders
      operationId: getAllOrders
      responses:
        '200':
          description: List of orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  total:
                    type: integer
                    example: 5

    post:
      summary: Create a new order
      description: Create a new order with the provided details
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/orders/{id}:
    get:
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Order ID
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete order
      description: Delete a specific order by its ID
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Order ID
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/orders/{id}/status:
    patch:
      summary: Update order status
      description: Update the status of a specific order
      operationId: updateOrderStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/OrderStatus'
              required:
                - status
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          description: Unique order identifier
          example: 1
        customerName:
          type: string
          description: Customer's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: Customer's email address
          example: "john.doe@example.com"
        product:
          $ref: '#/components/schemas/ProductType'
        quantity:
          type: integer
          minimum: 1
          description: Number of items ordered
          example: 2
        price:
          type: number
          format: float
          minimum: 0.01
          description: Unit price of the product
          example: 999.99
        total:
          type: number
          format: float
          description: Total order amount (quantity Ã— price)
          example: 1999.98
        status:
          $ref: '#/components/schemas/OrderStatus'
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
          example: "2024-01-01T12:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Order last update timestamp
          example: "2024-01-01T12:30:00.000Z"
      required:
        - id
        - customerName
        - email
        - product
        - quantity
        - price
        - total
        - status
        - createdAt

    CreateOrderRequest:
      type: object
      properties:
        customerName:
          type: string
          minLength: 1
          maxLength: 100
          description: Customer's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: Customer's email address
          example: "john.doe@example.com"
        product:
          $ref: '#/components/schemas/ProductType'
        quantity:
          type: integer
          minimum: 1
          maximum: 1000
          description: Number of items to order
          example: 2
        price:
          type: number
          format: float
          minimum: 0.01
          maximum: 999999.99
          description: Unit price of the product
          example: 999.99
      required:
        - customerName
        - email
        - product
        - quantity
        - price

    ProductType:
      type: string
      enum:
        - laptop
        - smartphone
        - tablet
        - headphones
        - smartwatch
      description: Available product types
      example: "laptop"

    OrderStatus:
      type: string
      enum:
        - pending
        - processing
        - shipped
        - delivered
        - cancelled
      description: Order status values
      example: "pending"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Order not found"
      required:
        - error

  examples:
    SampleOrder:
      summary: Sample order
      value:
        id: 1
        customerName: "John Doe"
        email: "john.doe@example.com"
        product: "laptop"
        quantity: 1
        price: 999.99
        total: 999.99
        status: "pending"
        createdAt: "2024-01-01T12:00:00.000Z"

    CreateOrderExample:
      summary: Create order request
      value:
        customerName: "Jane Smith"
        email: "jane.smith@example.com"
        product: "smartphone"
        quantity: 2
        price: 699.99

tags:
  - name: Health
    description: Health check operations
  - name: Orders
    description: Order management operations